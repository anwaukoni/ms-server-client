{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst tasks = createSlice({\n  name: \"tasks\",\n  initialState: [],\n  reducers: {\n    addTask: (state, action) => {\n      state.push({\n        id: new Date().toISOString(),\n        message: action.payload,\n        sortOrder: state.length\n      });\n    },\n    deleteTask: (state, action) => {\n      return state.filter(task => task.id !== action.payload.id);\n    },\n    editTask: (state, action) => {\n      const {\n        id,\n        message\n      } = action.payload;\n      const task = state.find(task => task.id === id);\n      if (task) {\n        task.message = message;\n      } else {\n        return state;\n      }\n    },\n    sort: (state, action) => {\n      const {\n        id,\n        newPosition\n      } = action.payload;\n      const activeTodo = state.find(task => task.id === id);\n      if (activeTodo) {\n        const currentPosition = activeTodo.sortOrder;\n        if (currentPosition > newPosition) {\n          // move sort order up\n          state.forEach(task => {\n            if (task.sortOrder >= newPosition && task.sortOrder < currentPosition + 1) {\n              task.sortOrder = task.sortOrder + 1; // move down\n            } else if (task.sortOrder === currentPosition) {\n              task.sortOrder = newPosition; // move to new position\n            }\n          });\n          state.splice(newPosition, 0, activeTodo); // insert at new position\n          state.splice(currentPosition, 1); // remove from old position\n        } else {\n          // move sort order down\n          state.forEach(task => {\n            if (task.sortOrder <= newPosition && task.sortOrder > currentPosition - 1) {\n              task.sortOrder = task.sortOrder - 1; // move up\n            } else if (task.sortOrder === currentPosition) {\n              task.sortOrder = newPosition; // move to new position\n            }\n          });\n          state.splice(newPosition, 0, activeTodo); // insert at new position\n          state.splice(currentPosition, 1); // remove from old position\n        }\n      }\n    }\n  }\n});\nexport const {\n  addTask,\n  deleteTask,\n  editTask,\n  sort\n} = tasks.actions;\nexport default tasks;","map":{"version":3,"names":["createSlice","tasks","name","initialState","reducers","addTask","state","action","push","id","Date","toISOString","message","payload","sortOrder","length","deleteTask","filter","task","editTask","find","sort","newPosition","activeTodo","currentPosition","forEach","splice","actions"],"sources":["/Users/anwaukoni/Desktop/Dev/client-austin-msamlin/src/features/todo/taskSlice.ts"],"sourcesContent":["import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\nexport interface Task {\n  id: string;\n  message: string;\n  sortOrder: number;\n}\n\nconst tasks = createSlice({\n  name: \"tasks\",\n  initialState: [] as Task[],\n  reducers: {\n    addTask: (state, action: PayloadAction<string>) => {\n      state.push({\n        id: new Date().toISOString(),\n        message: action.payload,\n        sortOrder: state.length,\n      })\n    },\n    deleteTask: (state, action: PayloadAction<{ id: string }>) => {\n      return state.filter((task) => task.id !== action.payload.id)\n    },\n    editTask: (state, action: PayloadAction<{ id: string, message: string }>) => {\n      const { id, message } = action.payload;\n      const task = state.find((task) => task.id === id);\n      if (task) {\n        task.message = message;\n      } else {\n        return state;\n      }\n    },\n    sort: (state, action: PayloadAction<{ id: string, newPosition: number }>) => {\n      const { id, newPosition } = action.payload;\n      const activeTodo = state.find((task) => task.id === id);\n      if (activeTodo) {\n        const currentPosition = activeTodo.sortOrder;\n        if (currentPosition > newPosition) {\n          // move sort order up\n          state.forEach((task) => {\n            if (task.sortOrder >= newPosition && task.sortOrder < currentPosition + 1) {\n              task.sortOrder = task.sortOrder + 1; // move down\n            } else if (task.sortOrder === currentPosition) {\n              task.sortOrder = newPosition; // move to new position\n            }\n          })\n\n          state.splice(newPosition, 0, activeTodo); // insert at new position\n          state.splice(currentPosition, 1); // remove from old position\n        } else {\n          // move sort order down\n          state.forEach((task) => {\n            if (task.sortOrder <= newPosition && task.sortOrder > currentPosition - 1) {\n              task.sortOrder = task.sortOrder - 1; // move up\n            } else if (task.sortOrder === currentPosition) {\n              task.sortOrder = newPosition; // move to new position\n            }\n          })\n          state.splice(newPosition, 0, activeTodo); // insert at new position\n          state.splice(currentPosition, 1); // remove from old position\n        }\n      }\n    }\n  }\n});\n\nexport const { addTask, deleteTask, editTask, sort } = tasks.actions;\n\nexport default tasks;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}