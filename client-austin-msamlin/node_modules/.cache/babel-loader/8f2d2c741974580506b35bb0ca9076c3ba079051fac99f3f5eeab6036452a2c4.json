{"ast":null,"code":"var _jsxFileName = \"/Users/anwaukoni/Desktop/Dev/client-austin-msamlin/src/features/task/TaskList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { editTask, deleteTask, updateSort } from './taskSlice';\nimport { fetchTasks } from './taskApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const dispatch = useAppDispatch();\n  const taskList = useAppSelector(state => state.tasks);\n  const [draggedItemIndex, setDraggedItemIndex] = React.useState(null);\n  useEffect(() => {\n    setLoading(true);\n    dispatch(fetchTasks());\n    setLoading(false);\n  }, [dispatch]);\n  const onDragStart = index => {\n    setDraggedItemIndex(index);\n  };\n  const onDragOver = index => {\n    if (draggedItemIndex === index || draggedItemIndex === null) return;\n    const updatedItems = [...taskList];\n    const draggedItem = updatedItems[draggedItemIndex];\n    updatedItems.splice(draggedItemIndex, 1);\n    updatedItems.splice(index, 0, draggedItem);\n    setDraggedItemIndex(index);\n    dispatch(updateSort(updatedItems)); // Update items in the Redux store\n  };\n  const onDragEnd = () => {\n    setDraggedItemIndex(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? 'loading...' : taskList.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      onDragStart: () => onDragStart(task.sortOrder),\n      onDragOver: () => onDragOver(task.sortOrder),\n      onDragEnd: onDragEnd\n      // draggable\n      ,\n      style: {\n        padding: '8px',\n        margin: '8px 0',\n        backgroundColor: draggedItemIndex === task.sortOrder ? 'green' : 'lightgray',\n        cursor: 'grab'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: task.message,\n        onChange: e => dispatch(editTask({\n          id: task.id,\n          message: e.target.value\n        }))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => dispatch(deleteTask({\n          id: task.id\n        })),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, task.sortOrder, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"1XmEEAHyqEr3bWtc1cXyd7lSkM8=\", false, function () {\n  return [useAppDispatch, useAppSelector];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","useAppDispatch","useAppSelector","editTask","deleteTask","updateSort","fetchTasks","jsxDEV","_jsxDEV","TaskList","_s","loading","setLoading","dispatch","taskList","state","tasks","draggedItemIndex","setDraggedItemIndex","onDragStart","index","onDragOver","updatedItems","draggedItem","splice","onDragEnd","children","map","task","sortOrder","style","padding","margin","backgroundColor","cursor","type","value","message","onChange","e","id","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/anwaukoni/Desktop/Dev/client-austin-msamlin/src/features/task/TaskList.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { AppDispatch, RootState } from '../../app/store';\nimport { editTask, deleteTask, updateSort } from './taskSlice';\nimport { fetchTasks } from './taskApi';\n\nconst  TaskList: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const dispatch: AppDispatch = useAppDispatch();\n  const  taskList = useAppSelector((state: RootState)=> state.tasks);\n  const [draggedItemIndex, setDraggedItemIndex] = React.useState<number | null>(null);\n  useEffect(() => {\n    setLoading(true)\n    dispatch(fetchTasks())\n    setLoading(false)\n  }, [dispatch])\n  \n  const onDragStart = (index: number) => {\n    setDraggedItemIndex(index);\n  };\n\n  const onDragOver = (index: number) => {\n    if (draggedItemIndex === index || draggedItemIndex === null) return;\n\n    const updatedItems = [...taskList];\n    const draggedItem = updatedItems[draggedItemIndex];\n    updatedItems.splice(draggedItemIndex, 1);\n    updatedItems.splice(index, 0, draggedItem);\n    setDraggedItemIndex(index);\n    dispatch(updateSort(updatedItems)); // Update items in the Redux store\n  };\n\n  const onDragEnd = () => {\n    setDraggedItemIndex(null);\n  };\n\n  return (\n    <div>\n      {loading ? 'loading...': taskList.map((task) => (\n        <div \n          key={task.sortOrder}\n          onDragStart={() => onDragStart(task.sortOrder)}\n          onDragOver={() => onDragOver(task.sortOrder)}\n          onDragEnd={onDragEnd}\n          // draggable\n          style={{\n            padding: '8px',\n            margin: '8px 0',\n            backgroundColor: draggedItemIndex === task.sortOrder ? 'green' : 'lightgray',\n            cursor: 'grab'\n          }}\n        >\n          <input\n            type=\"text\"\n            value={task.message}\n            onChange={(e) => dispatch(editTask({ id: task.id, message: e.target.value }))} />\n          <button onClick={() => dispatch(deleteTask({id: task.id}))}>X</button>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default  TaskList;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}