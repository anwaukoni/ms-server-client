{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { addTasks } from './taskSlice';\nimport { apiSlice } from '../../app/api/apiSlice';\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (_, {\n  dispatch,\n  rejectWithValue\n}) => {\n  const state = getState();\n  const token = state.auth.token;\n  try {\n    const response = await fetch('http://localhost:3333/tasks', {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/x-wwww-form-urlencoded\",\n        \"Authorization\": `Bearer ${token}`,\n        \"Content-Length\": \"0\"\n      }\n    });\n    if (!response.ok) {\n      return rejectWithValue({\n        error: 'Network response was not ok'\n      });\n    }\n    const data = await response.json();\n    ;\n    const result = data.map(({\n      id,\n      message,\n      sortOrder\n    }) => ({\n      id,\n      message,\n      sortOrder\n    }));\n    dispatch(addTasks(result));\n    return data;\n  } catch (error) {\n    return rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const batchAddTasks = createAsyncThunk('tasks/addTasks', async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    const state = getState();\n    const tasks = state.tasks;\n    console.log({\n      tasks\n    });\n    console.log({\n      stringify: JSON.stringify(tasks)\n    });\n    if (!tasks) {\n      return;\n    }\n    const token = state.auth.token;\n    const response = await fetch('http://localhost:3333/tasks/batch', {\n      method: \"POST\",\n      body: JSON.stringify(tasks),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token} `\n      }\n    });\n    if (!response.ok) {\n      return rejectWithValue({\n        error: 'Network response was not ok'\n      });\n    }\n    const status = await response.json();\n    return status;\n  } catch (error) {\n    return rejectWithValue({\n      error: error.message\n    });\n  }\n});\nexport const taskApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    batchAdd: builder.mutation({\n      query: credentials => ({\n        url: '/tasks/batch',\n        method: 'POST',\n        body: {\n          ...credentials\n        }\n      })\n    })\n  })\n});\nexport const {\n  useBatchAddMutation\n} = taskApiSlice;\nfunction getState() {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"names":["createAsyncThunk","addTasks","apiSlice","fetchTasks","_","dispatch","rejectWithValue","state","getState","token","auth","response","fetch","method","headers","ok","error","data","json","result","map","id","message","sortOrder","batchAddTasks","tasks","console","log","stringify","JSON","body","status","taskApiSlice","injectEndpoints","endpoints","builder","batchAdd","mutation","query","credentials","url","useBatchAddMutation","Error"],"sources":["/Users/anwaukoni/Desktop/Dev/client-austin-msamlin/src/features/task/taskApi.ts"],"sourcesContent":["\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Task, addTasks } from './taskSlice';\nimport { RootState } from '../../app/store';\nimport { apiSlice } from '../../app/api/apiSlice';\n\nexport const fetchTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n  'tasks/fetchTasks',\n  async (_, { dispatch, rejectWithValue }) => {\n    const state = getState() as RootState;\n    const token = state.auth.token;\n    try {\n      const response = await fetch('http://localhost:3333/tasks', {\n        method: \"GET\", \n        headers: {\n          \"Content-Type\": \"application/x-wwww-form-urlencoded\",\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Length\": \"0\"\n        }\n      });\n      if (!response.ok) {\n        return rejectWithValue({ error: 'Network response was not ok' });\n      }\n      const data: Task[] = await response.json();;\n\n      const result = data.map(({id, message, sortOrder}) => ({id, message, sortOrder}))\n      dispatch(addTasks(result));\n      return data;\n    } catch (error: any) {\n      return rejectWithValue({ error: error.message });\n    }\n  }\n);\n\nexport const batchAddTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n  'tasks/addTasks',\n  async (_, { getState, rejectWithValue }) => {\n    try {\n      const state = getState() as RootState;\n      const tasks: any = state.tasks;\n      console.log({tasks});\n      console.log({stringify: JSON.stringify(tasks)});\n      if (!tasks) {\n        return;\n      }\n      const token = state.auth.token;\n      const response = await fetch('http://localhost:3333/tasks/batch', {\n        method: \"POST\", \n        body: JSON.stringify(tasks),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": `Bearer ${token} `\n        }\n      });\n      if (!response.ok) {\n        return rejectWithValue({ error: 'Network response was not ok' });\n      }\n      const status = await response.json()\n      return status;\n    } catch (error: any) {\n      return rejectWithValue({ error: error.message });\n    }\n  }\n);\n\nexport const taskApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n      batchAdd: builder.mutation({\n          query: credentials => ({\n              url: '/tasks/batch',\n              method: 'POST',\n              body: { ...credentials }\n          })\n      }),\n  })\n})\n\nexport const {\n  useBatchAddMutation,\n} = taskApiSlice\n\nfunction getState(): { api: import(\"@reduxjs/toolkit/query\").CombinedState<{}, never, \"api\">; auth: { user: null; token: null; }; tasks: Task[]; } {\n  throw new Error('Function not implemented.');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}