{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => {\n        return {\n          url: 'auth/signup',\n          method: 'POST',\n          body: {\n            ...credentials\n          },\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n      }\n    })\n  })\n});\nexport const {\n  useLoginMutation\n} = authApiSlice;\nexport const signUp = createAsyncThunk('tasks/signUp', async (_, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('http://localhost:3333/auth/signup', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-wwww-form-urlencoded\",\n        \"Accept\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: \"admin@gmail.com\",\n        password: \"123\"\n      })\n    });\n    console.log({\n      response\n    });\n    if (!response.ok) {\n      return rejectWithValue({\n        error: 'Network response was not ok'\n      });\n    }\n    const data = await response.json();\n    ;\n    console.log({\n      data\n    });\n\n    // const result = data.map(({id, message, sortOrder}) => ({id, message, sortOrder}))\n    // dispatch(setCredentials(result));\n    return data;\n  } catch (error) {\n    return rejectWithValue({\n      error: error.message\n    });\n  }\n});","map":{"version":3,"names":["createAsyncThunk","apiSlice","authApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","method","body","headers","useLoginMutation","signUp","_","dispatch","rejectWithValue","response","fetch","JSON","stringify","email","password","console","log","ok","error","data","json","message"],"sources":["/Users/anwaukoni/Desktop/Dev/client-austin-msamlin/src/features/auth/authApiSlice.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nimport { Task } from \"../task/taskSlice\";\nimport { RootState } from \"@reduxjs/toolkit/query\";\nimport { setCredentials } from \"./authSlice\";\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        login: builder.mutation({\n            query: credentials => {\n              return {\n                url: 'auth/signup',\n                method: 'POST',\n                body: { ...credentials },\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }  \n            }\n        }),\n    })\n})\n\nexport const {\n    useLoginMutation\n} = authApiSlice\n\nexport const signUp = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n  'tasks/signUp',\n  async (_, { dispatch, rejectWithValue }) => {\n    try {\n      const response = await fetch('http://localhost:3333/auth/signup', {\n        method: \"POST\", \n        headers: {\n          \"Content-Type\": \"application/x-wwww-form-urlencoded\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          email:\"admin@gmail.com\",\n          password:\"123\"\n        })\n      });\n\n      console.log({response});\n\n      if (!response.ok) {\n        return rejectWithValue({ error: 'Network response was not ok' });\n      }\n      const data = await response.json();;\n      console.log({data})\n      \n      // const result = data.map(({id, message, sortOrder}) => ({id, message, sortOrder}))\n      // dispatch(setCredentials(result));\n      return data;\n    } catch (error: any) {\n      return rejectWithValue({ error: error.message });\n    }\n  }\n);\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,QAAQ,QAAQ,wBAAwB;AAKjD,OAAO,MAAMC,YAAY,GAAGD,QAAQ,CAACE,eAAe,CAAC;EACjDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;MACpBC,KAAK,EAAEC,WAAW,IAAI;QACpB,OAAO;UACLC,GAAG,EAAE,aAAa;UAClBC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAE;YAAE,GAAGH;UAAY,CAAC;UACxBI,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC;MACH;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTC;AACJ,CAAC,GAAGZ,YAAY;AAEhB,OAAO,MAAMa,MAAM,GAAGf,gBAAgB,CACpC,cAAc,EACd,OAAOgB,CAAC,EAAE;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAChET,MAAM,EAAE,MAAM;MACdE,OAAO,EAAE;QACP,cAAc,EAAE,oCAAoC;QACpD,QAAQ,EAAE;MACZ,CAAC;MACDD,IAAI,EAAES,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAC,iBAAiB;QACvBC,QAAQ,EAAC;MACX,CAAC;IACH,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC;MAACP;IAAQ,CAAC,CAAC;IAEvB,IAAI,CAACA,QAAQ,CAACQ,EAAE,EAAE;MAChB,OAAOT,eAAe,CAAC;QAAEU,KAAK,EAAE;MAA8B,CAAC,CAAC;IAClE;IACA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAAC;IACnCL,OAAO,CAACC,GAAG,CAAC;MAACG;IAAI,CAAC,CAAC;;IAEnB;IACA;IACA,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOD,KAAU,EAAE;IACnB,OAAOV,eAAe,CAAC;MAAEU,KAAK,EAAEA,KAAK,CAACG;IAAQ,CAAC,CAAC;EAClD;AACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}