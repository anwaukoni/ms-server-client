{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { addTasks } from './taskSlice';\nimport { apiSlice } from '../../app/api/apiSlice';\n\n// const getToken = () => {\n//   const token = localStorage.getItem('token');\n//   if (!token) {\n//     throw new Error('No token saved');\n//   }\n// }\n\nconst options = {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYUBnbWFpbC5jb20iLCJpYXQiOjE3MTgwNTc3MjUsImV4cCI6MTcxODE0NDEyNX0.Ve29Agtq_FRaWkQBxRiGviv_eIJOs2ZJgTMvDpArXPQ\",\n    \"Content-Length\": \"0\"\n  }\n};\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (_, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('http://localhost:3333/tasks', options);\n    if (!response.ok) {\n      return rejectWithValue({\n        error: 'Network response was not ok'\n      });\n    }\n    const data = await response.json();\n    ;\n    const result = data.map(({\n      id,\n      message,\n      sortOrder\n    }) => ({\n      id,\n      message,\n      sortOrder\n    }));\n    dispatch(addTasks(result));\n    return data;\n  } catch (error) {\n    return rejectWithValue({\n      error: error.message\n    });\n  }\n});\n\n// const postOptions = {\n//   \"method\": \"POST\",\n//   \"headers\": {\n//     \"Content-Type\": \"application/json\",\n//     \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYUBnbWFpbC5jb20iLCJpYXQiOjE3MTgwNTc3MjUsImV4cCI6MTcxODE0NDEyNX0.Ve29Agtq_FRaWkQBxRiGviv_eIJOs2ZJgTMvDpArXPQ\",\n//   },\n// }\n\n// export const batchAddTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n//   'tasks/addTasks',\n//   async (_, { getState, rejectWithValue }) => {\n//     try {\n//       const state = getState() as RootState;\n//       const tasks: any = state.tasks;\n//       console.log(tasks);\n//       console.log(JSON.stringify(tasks));\n//       const response = await fetch('http://localhost:3333/tasks/batch', { ...postOptions, body: JSON.stringify(tasks) });\n//       if (!response.ok) {\n//         return rejectWithValue({ error: 'Network response was not ok' });\n//       }\n//       const status = await response.json()\n//       return status;\n//     } catch (error: any) {\n//       return rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n\nexport const taskApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    batchAdd: builder.mutation({\n      query: credentials => ({\n        url: '/tasks/batch',\n        method: 'POST',\n        body: {\n          ...credentials\n        }\n      })\n    })\n  })\n});\nexport const {\n  useBatchAddMutation\n} = taskApiSlice;","map":{"version":3,"names":["createAsyncThunk","addTasks","apiSlice","options","fetchTasks","_","dispatch","rejectWithValue","response","fetch","ok","error","data","json","result","map","id","message","sortOrder","taskApiSlice","injectEndpoints","endpoints","builder","batchAdd","mutation","query","credentials","url","method","body","useBatchAddMutation"],"sources":["/Users/anwaukoni/Desktop/Dev/client-austin-msamlin/src/features/task/taskApi.ts"],"sourcesContent":["\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Task, addTasks } from './taskSlice';\nimport { RootState } from '../../app/store';\nimport { apiSlice } from '../../app/api/apiSlice';\n\n\n\n// const getToken = () => {\n//   const token = localStorage.getItem('token');\n//   if (!token) {\n//     throw new Error('No token saved');\n//   }\n// }\n\nconst options = {\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYUBnbWFpbC5jb20iLCJpYXQiOjE3MTgwNTc3MjUsImV4cCI6MTcxODE0NDEyNX0.Ve29Agtq_FRaWkQBxRiGviv_eIJOs2ZJgTMvDpArXPQ\",\n    \"Content-Length\": \"0\"\n  }\n};\n\nexport const fetchTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n  'tasks/fetchTasks',\n  async (_, { dispatch, rejectWithValue }) => {\n    try {\n      const response = await fetch('http://localhost:3333/tasks', options);\n      if (!response.ok) {\n        return rejectWithValue({ error: 'Network response was not ok' });\n      }\n      const data: Task[] = await response.json();;\n\n      const result = data.map(({id, message, sortOrder}) => ({id, message, sortOrder}))\n      dispatch(addTasks(result));\n      return data;\n    } catch (error: any) {\n      return rejectWithValue({ error: error.message });\n    }\n  }\n);\n\n// const postOptions = {\n//   \"method\": \"POST\",\n//   \"headers\": {\n//     \"Content-Type\": \"application/json\",\n//     \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYUBnbWFpbC5jb20iLCJpYXQiOjE3MTgwNTc3MjUsImV4cCI6MTcxODE0NDEyNX0.Ve29Agtq_FRaWkQBxRiGviv_eIJOs2ZJgTMvDpArXPQ\",\n//   },\n// }\n\n// export const batchAddTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n//   'tasks/addTasks',\n//   async (_, { getState, rejectWithValue }) => {\n//     try {\n//       const state = getState() as RootState;\n//       const tasks: any = state.tasks;\n//       console.log(tasks);\n//       console.log(JSON.stringify(tasks));\n//       const response = await fetch('http://localhost:3333/tasks/batch', { ...postOptions, body: JSON.stringify(tasks) });\n//       if (!response.ok) {\n//         return rejectWithValue({ error: 'Network response was not ok' });\n//       }\n//       const status = await response.json()\n//       return status;\n//     } catch (error: any) {\n//       return rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n\nexport const taskApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n      batchAdd: builder.mutation({\n          query: credentials => ({\n              url: '/tasks/batch',\n              method: 'POST',\n              body: { ...credentials }\n          })\n      }),\n  })\n})\n\nexport const {\n  useBatchAddMutation,\n} = taskApiSlice"],"mappings":"AACA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAAeC,QAAQ,QAAQ,aAAa;AAE5C,SAASC,QAAQ,QAAQ,wBAAwB;;AAIjD;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG;EACd,QAAQ,EAAE,KAAK;EACf,SAAS,EAAE;IACT,cAAc,EAAE,mCAAmC;IACnD,eAAe,EAAE,iLAAiL;IAClM,gBAAgB,EAAE;EACpB;AACF,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGJ,gBAAgB,CACxC,kBAAkB,EAClB,OAAOK,CAAC,EAAE;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAEN,OAAO,CAAC;IACpE,IAAI,CAACK,QAAQ,CAACE,EAAE,EAAE;MAChB,OAAOH,eAAe,CAAC;QAAEI,KAAK,EAAE;MAA8B,CAAC,CAAC;IAClE;IACA,MAAMC,IAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAAC;IAE3C,MAAMC,MAAM,GAAGF,IAAI,CAACG,GAAG,CAAC,CAAC;MAACC,EAAE;MAAEC,OAAO;MAAEC;IAAS,CAAC,MAAM;MAACF,EAAE;MAAEC,OAAO;MAAEC;IAAS,CAAC,CAAC,CAAC;IACjFZ,QAAQ,CAACL,QAAQ,CAACa,MAAM,CAAC,CAAC;IAC1B,OAAOF,IAAI;EACb,CAAC,CAAC,OAAOD,KAAU,EAAE;IACnB,OAAOJ,eAAe,CAAC;MAAEI,KAAK,EAAEA,KAAK,CAACM;IAAQ,CAAC,CAAC;EAClD;AACF,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,YAAY,GAAGjB,QAAQ,CAACkB,eAAe,CAAC;EACnDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,QAAQ,EAAED,OAAO,CAACE,QAAQ,CAAC;MACvBC,KAAK,EAAEC,WAAW,KAAK;QACnBC,GAAG,EAAE,cAAc;QACnBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAE,GAAGH;QAAY;MAC3B,CAAC;IACL,CAAC;EACL,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EACXI;AACF,CAAC,GAAGX,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}