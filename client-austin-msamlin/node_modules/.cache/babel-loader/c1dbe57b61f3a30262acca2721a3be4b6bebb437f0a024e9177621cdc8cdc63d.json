{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nimport { setCredentials } from \"./authSlice\";\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => {\n        return {\n          url: 'auth/signup',\n          method: 'POST',\n          body: {\n            ...credentials\n          },\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        };\n      }\n    })\n  })\n});\nexport const {\n  useLoginMutation\n} = authApiSlice;\nexport const fetchTasks = createAsyncThunk('tasks/fetchTasks', async (_, {\n  dispatch,\n  rejectWithValue\n}) => {\n  try {\n    const state = getState();\n    const tasks = state.tasks;\n    if (!tasks) {\n      return;\n    }\n    const response = await fetch('http://localhost:3333/auth/signup', {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-wwww-form-urlencoded\",\n        \"Content-Length\": \"0\"\n      },\n      body: JSON.stringify({})\n    });\n    if (!response.ok) {\n      return rejectWithValue({\n        error: 'Network response was not ok'\n      });\n    }\n    const data = await response.json();\n    ;\n    const result = data.map(({\n      id,\n      message,\n      sortOrder\n    }) => ({\n      id,\n      message,\n      sortOrder\n    }));\n    dispatch(setCredentials(result));\n    return data;\n  } catch (error) {\n    return rejectWithValue({\n      error: error.message\n    });\n  }\n});","map":{"version":3,"names":["createAsyncThunk","apiSlice","setCredentials","authApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","method","body","headers","useLoginMutation","fetchTasks","_","dispatch","rejectWithValue","state","getState","tasks","response","fetch","JSON","stringify","ok","error","data","json","result","map","id","message","sortOrder"],"sources":["/Users/anwaukoni/Desktop/Dev/client-austin-msamlin/src/features/auth/authApiSlice.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { apiSlice } from \"../../app/api/apiSlice\";\nimport { Task } from \"../task/taskSlice\";\nimport { RootState } from \"@reduxjs/toolkit/query\";\nimport { setCredentials } from \"./authSlice\";\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        login: builder.mutation({\n            query: credentials => {\n              return {\n                url: 'auth/signup',\n                method: 'POST',\n                body: { ...credentials },\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }  \n            }\n        }),\n    })\n})\n\nexport const {\n    useLoginMutation\n} = authApiSlice\n\nexport const fetchTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n  'tasks/fetchTasks',\n  async (_, { dispatch, rejectWithValue }) => {\n    try {\n      const state = getState() as RootState;\n      const tasks: any = state.tasks;\n      if (!tasks) {\n        return;\n      }\n      const response = await fetch('http://localhost:3333/auth/signup', {\n        method: \"POST\", \n        headers: {\n          \"Content-Type\": \"application/x-wwww-form-urlencoded\",\n          \"Content-Length\": \"0\"\n        },\n        body: JSON.stringify({\n\n        })\n      });\n      if (!response.ok) {\n        return rejectWithValue({ error: 'Network response was not ok' });\n      }\n      const data: Task[] = await response.json();;\n\n      const result = data.map(({id, message, sortOrder}) => ({id, message, sortOrder}))\n      dispatch(setCredentials(result));\n      return data;\n    } catch (error: any) {\n      return rejectWithValue({ error: error.message });\n    }\n  }\n);\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,QAAQ,QAAQ,wBAAwB;AAGjD,SAASC,cAAc,QAAQ,aAAa;AAE5C,OAAO,MAAMC,YAAY,GAAGF,QAAQ,CAACG,eAAe,CAAC;EACjDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;MACpBC,KAAK,EAAEC,WAAW,IAAI;QACpB,OAAO;UACLC,GAAG,EAAE,aAAa;UAClBC,MAAM,EAAE,MAAM;UACdC,IAAI,EAAE;YAAE,GAAGH;UAAY,CAAC;UACxBI,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC;MACH;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTC;AACJ,CAAC,GAAGZ,YAAY;AAEhB,OAAO,MAAMa,UAAU,GAAGhB,gBAAgB,CACxC,kBAAkB,EAClB,OAAOiB,CAAC,EAAE;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAC1C,IAAI;IACF,MAAMC,KAAK,GAAGC,QAAQ,CAAC,CAAc;IACrC,MAAMC,KAAU,GAAGF,KAAK,CAACE,KAAK;IAC9B,IAAI,CAACA,KAAK,EAAE;MACV;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;MAChEZ,MAAM,EAAE,MAAM;MACdE,OAAO,EAAE;QACP,cAAc,EAAE,oCAAoC;QACpD,gBAAgB,EAAE;MACpB,CAAC;MACDD,IAAI,EAAEY,IAAI,CAACC,SAAS,CAAC,CAErB,CAAC;IACH,CAAC,CAAC;IACF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MAChB,OAAOR,eAAe,CAAC;QAAES,KAAK,EAAE;MAA8B,CAAC,CAAC;IAClE;IACA,MAAMC,IAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAAC;IAE3C,MAAMC,MAAM,GAAGF,IAAI,CAACG,GAAG,CAAC,CAAC;MAACC,EAAE;MAAEC,OAAO;MAAEC;IAAS,CAAC,MAAM;MAACF,EAAE;MAAEC,OAAO;MAAEC;IAAS,CAAC,CAAC,CAAC;IACjFjB,QAAQ,CAAChB,cAAc,CAAC6B,MAAM,CAAC,CAAC;IAChC,OAAOF,IAAI;EACb,CAAC,CAAC,OAAOD,KAAU,EAAE;IACnB,OAAOT,eAAe,CAAC;MAAES,KAAK,EAAEA,KAAK,CAACM;IAAQ,CAAC,CAAC;EAClD;AACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}