{"ast":null,"code":"import { apiSlice } from \"../../app/api/apiSlice\";\nexport const taskApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/tasks',\n        method: 'POST',\n        body: {\n          ...credentials\n        }\n      })\n    })\n  })\n});\nexport const {\n  usePrefetch\n} = taskApiSlice;\n\n// // const getToken = () => {\n// //   const token = localStorage.getItem('token');\n// //   if (!token) {\n// //     throw new Error('No token saved');\n// //   }\n// // }\n\n// const options = {\n//   \"method\": \"GET\",\n//   \"headers\": {\n//     \"Content-Type\": \"application/x-www-form-urlencoded\",\n//     \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYUBnbWFpbC5jb20iLCJpYXQiOjE3MTgwNTc3MjUsImV4cCI6MTcxODE0NDEyNX0.Ve29Agtq_FRaWkQBxRiGviv_eIJOs2ZJgTMvDpArXPQ\",\n//     \"Content-Length\": \"0\"\n//   }\n// };\n\n// export const fetchTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n//   'tasks/fetchTasks',\n//   async (_, { dispatch, rejectWithValue }) => {\n//     try {\n//       const response = await fetch('http://localhost:3333/tasks', options);\n//       if (!response.ok) {\n//         return rejectWithValue({ error: 'Network response was not ok' });\n//       }\n//       const data: Task[] = await response.json();;\n\n//       const result = data.map(({id, message, sortOrder}) => ({id, message, sortOrder}))\n//       dispatch(addTasks(result));\n//       return data;\n//     } catch (error: any) {\n//       return rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n\n// const postOptions = {\n//   \"method\": \"POST\",\n//   \"headers\": {\n//     \"Content-Type\": \"application/json\",\n//     \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYUBnbWFpbC5jb20iLCJpYXQiOjE3MTgwNTc3MjUsImV4cCI6MTcxODE0NDEyNX0.Ve29Agtq_FRaWkQBxRiGviv_eIJOs2ZJgTMvDpArXPQ\",\n//   },\n// }\n\n// export const batchAddTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n//   'tasks/addTasks',\n//   async (_, { getState, rejectWithValue }) => {\n//     try {\n//       const state = getState() as RootState;\n//       const tasks: any = state.tasks;\n//       console.log(tasks);\n//       console.log(JSON.stringify(tasks));\n//       const response = await fetch('http://localhost:3333/tasks/batch', { ...postOptions, body: JSON.stringify(tasks) });\n//       if (!response.ok) {\n//         return rejectWithValue({ error: 'Network response was not ok' });\n//       }\n//       const status = await response.json()\n//       return status;\n//     } catch (error: any) {\n//       return rejectWithValue({ error: error.message });\n//     }\n//   }\n// );","map":{"version":3,"names":["apiSlice","taskApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","method","body","usePrefetch"],"sources":["/Users/anwaukoni/Desktop/Dev/client-austin-msamlin/src/features/task/taskApi.ts"],"sourcesContent":["\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Task, addTasks } from './taskSlice';\nimport { RootState } from '../../app/store';\n\nimport { apiSlice } from \"../../app/api/apiSlice\";\n\nexport const taskApiSlice = apiSlice.injectEndpoints({\n    endpoints: builder => ({\n        login: builder.mutation({\n            query: credentials => ({\n                url: '/tasks',\n                method: 'POST',\n                body: { ...credentials }\n            })\n        }),\n    })\n})\n\nexport const {\n    usePrefetch\n} = taskApiSlice\n\n// // const getToken = () => {\n// //   const token = localStorage.getItem('token');\n// //   if (!token) {\n// //     throw new Error('No token saved');\n// //   }\n// // }\n\n// const options = {\n//   \"method\": \"GET\",\n//   \"headers\": {\n//     \"Content-Type\": \"application/x-www-form-urlencoded\",\n//     \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYUBnbWFpbC5jb20iLCJpYXQiOjE3MTgwNTc3MjUsImV4cCI6MTcxODE0NDEyNX0.Ve29Agtq_FRaWkQBxRiGviv_eIJOs2ZJgTMvDpArXPQ\",\n//     \"Content-Length\": \"0\"\n//   }\n// };\n\n// export const fetchTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n//   'tasks/fetchTasks',\n//   async (_, { dispatch, rejectWithValue }) => {\n//     try {\n//       const response = await fetch('http://localhost:3333/tasks', options);\n//       if (!response.ok) {\n//         return rejectWithValue({ error: 'Network response was not ok' });\n//       }\n//       const data: Task[] = await response.json();;\n\n//       const result = data.map(({id, message, sortOrder}) => ({id, message, sortOrder}))\n//       dispatch(addTasks(result));\n//       return data;\n//     } catch (error: any) {\n//       return rejectWithValue({ error: error.message });\n//     }\n//   }\n// );\n\n// const postOptions = {\n//   \"method\": \"POST\",\n//   \"headers\": {\n//     \"Content-Type\": \"application/json\",\n//     \"Authorization\": \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsImVtYWlsIjoiYUBnbWFpbC5jb20iLCJpYXQiOjE3MTgwNTc3MjUsImV4cCI6MTcxODE0NDEyNX0.Ve29Agtq_FRaWkQBxRiGviv_eIJOs2ZJgTMvDpArXPQ\",\n//   },\n// }\n\n// export const batchAddTasks = createAsyncThunk<Task[], void, { rejectValue: { error: string } }>(\n//   'tasks/addTasks',\n//   async (_, { getState, rejectWithValue }) => {\n//     try {\n//       const state = getState() as RootState;\n//       const tasks: any = state.tasks;\n//       console.log(tasks);\n//       console.log(JSON.stringify(tasks));\n//       const response = await fetch('http://localhost:3333/tasks/batch', { ...postOptions, body: JSON.stringify(tasks) });\n//       if (!response.ok) {\n//         return rejectWithValue({ error: 'Network response was not ok' });\n//       }\n//       const status = await response.json()\n//       return status;\n//     } catch (error: any) {\n//       return rejectWithValue({ error: error.message });\n//     }\n//   }\n// );"],"mappings":"AAKA,SAASA,QAAQ,QAAQ,wBAAwB;AAEjD,OAAO,MAAMC,YAAY,GAAGD,QAAQ,CAACE,eAAe,CAAC;EACjDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;MACpBC,KAAK,EAAEC,WAAW,KAAK;QACnBC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAE,GAAGH;QAAY;MAC3B,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EACTI;AACJ,CAAC,GAAGX,YAAY;;AAEhB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}